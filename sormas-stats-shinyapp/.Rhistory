getwd()
library(shiny); source('launch_app.R')
source('launch_app.R')
getwd()
source("loading_packages.R")
mypath = "/home/bsi17/SORMAS-Stats-next-gen/sormas-stats-shinyapp" # This should be the address of the shinyapp folder of your sustem
source('launch_app.R')
# Defining parameters to be used to sample data
delay = 1000 # number of days to count backward from today,  default from date = 90 days in the past
fromDate = as.character(Sys.Date() - delay - 1) #  you can directly define fromDate as: fromDate = as.character("yyyy-mm-dd")
toDate = as.character(Sys.Date() + 1) # or toDate = as.character("yyyy-mm-dd"), +1 is added because between sql commant does not consider end of intervals
uniquePersonPersonContact = TRUE # or FALSE to keep only one contact between the same 2 persons ( case person and contact person)
# Defining colours to be used by dashboard icons for entities
colCont = "green"  # contact colour
colCase="red"   # case colour
colEvent = "blue"   # event colour
colPerson = "black"   # contact person or event participant person colour
colEdge = "black"
# Defining connection to db
DB_USER = "sormas_user"
DB_PASS = "password"
DB_HOST = "127.0.0.1"
DB_PORT = "5432"
DB_NAME= "sormas"
## Extracting eventData -----
sormas_db = dbConnect(PostgreSQL(), user=DB_USER,  dbname=DB_NAME, password = DB_PASS, host=DB_HOST, port=DB_PORT)
eventData = eventExport(sormas_db,fromDate = fromDate, toDate = toDate)
library(shiny)
#
### loading packages ############
# if(!require(shiny)) install.packages("shiny", repos = "http://cran.us.r-project.org")
# if(!require(shinyWidgets)) install.packages("shinyWidgets", repos = "http://cran.us.r-project.org")
# if(!require(shinydashboard)) install.packages("shinydashboard", repos = "http://cran.us.r-project.org")
# if(!require(shinythemes)) install.packages("shinythemes", repos = "http://cran.us.r-project.org")
#
#
# if(!require(dplyr)) install.packages("dplyr", repos = "http://cran.us.r-project.org")
# if(!require(ggplot2)) install.packages("ggplot2", repos = "http://cran.us.r-project.org")
# if(!require(RColorBrewer)) install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
# if(!require(plotly)) install.packages("plotly", repos = "http://cran.us.r-project.org")
# if(!require(visNetwork)) install.packages("visNetwork", repos = "http://cran.us.r-project.org")
# if(!require(extrafont)) install.packages("extrafont", repos = "http://cran.us.r-project.org")
# if(!require(rpart)) install.packages("rpart", repos = "http://cran.us.r-project.org")
# if(!require(ggthemes)) install.packages("ggthemes", repos = "http://cran.us.r-project.org")
# if(!require(lubridate)) install.packages("lubridate", repos = "http://cran.us.r-project.org")
# if(!require(Hmisc)) install.packages("Hmisc", repos = "http://cran.us.r-project.org")
# if(!require(gdata)) install.packages("gdata", repos = "http://cran.us.r-project.org")
# if(!require(scales)) install.packages("scales", repos = "http://cran.us.r-project.org")
# if(!require(EpiEstim)) install_github("annecori/EpiEstim", force = TRUE)
# if(!require(incidence))  install.packages("incidence",  repos = "http://cran.us.r-project.org")
# if(!require(tidyr))  install.packages("tidyr",  repos = "http://cran.us.r-project.org")
# if (!require("DT")) install.packages('DT')
#if(!require(XML2)) install.packages("XML2", repos = "http://cran.us.r-project.org")
#if(!require(reshape2)) install.packages("reshape2", repos = "http://cran.us.r-project.org")
library(shiny)
library(shinythemes)
library(shinydashboard)
library(shinyWidgets)
library(shinyjs)
library(shinycssloaders)
library(visNetwork)
library(ggplot2)
library(dplyr)
library(plotly)
library(extrafont)
library(rpart)
library(RColorBrewer)
library(webshot) # for plot export
library(ggthemes)
library(lubridate)
library(Hmisc)
library(gdata)
library(scales)
library(EpiEstim)
library(incidence)
library(tidyr)
library(DT)
library(rgdal)
library(maps)
library(maptools)
library(mapdata)
library(ggplot2)
library(foreign)
library(sp)
library(broom)
library(stringi)
library(ggmap)
library(rgeos)
library(tmap)
#library(sf)
library(lattice)
library(RPostgreSQL)
library(igraph)
library(leaflet)
library(fitdistrplus)
library(tidyverse)
## loading functions #####
load("importingData.R")
load("dateTimeToDate.R")
load("import.multiple.csv.files.R")
load("plotNet.R")
load("mergingData.R")
load("mergingDataFromDB.R")
load("contIdsForSingleChain.R")
## Functions for case data analysis
load("ImportingUnformatedDataFromDB.R")
load("pyramidPlotFunction.R")
load("timeSeriesPlotDay.R")
load("timeSeriesPlotWeek.R")
load("timeSeriesPlotMonth.R")
load("timeSeriesPlotDayRegion.R")
load("epicurveDate.R")
load("epicurveMonth.R")
load("regionMapPlot.R")
load("districtMapPlot.R")
load("RtPlot.R")
load("factorLevelCount.R")
load("cuntbyRegionDistrictCase.R")
load("proportionByregion.R")
load("eventExport.R")
load("twoByTwoTablefunction.R")
load("pieChartPlot.R")
load("factorLevelCountEvent.R")
load("cuntbyRegionDistrictEvent.R")
load("compute_person_node_uuid.R")
load("prop_cont_ep_person_convertedToCase.R")
load("prop_missing_source_case_nodes.R")
load("barplotEventStatusByJurisdiction.R")
load("infectorInfecteeExport.R")
load("serialIntervalPlot.R")
load("offspringDistPlot.R")
load("fixBirthDate.R")
